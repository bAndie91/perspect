#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

# what does this script do?
# - display the image file given in cli argument in a window
# - let you select 4 coordinates with left mouse button
# - you can move an already pinned point by clicking again so then the closes point will be moved over
# - remove a pin point by right-clicking nearby
# - middle-click redraws the helper quadrangle
#
# KEYS
#
# F1 - perspective correction (distort) and crop, then open resulting image
# F2 - crop around on bounding box, then open
# F3 - rotate the image so the drawn line segment (pin 2 points down only, not 4) to be horizontal
# F4 - rotate the image so the drawn line segment (pin 2 points down only, not 4) to be vertical
# ESC - close
#
# HINTS
#
# images are not scaled, but displayed at the original size, so
# a window manager which supports Alt-dragging and window regions being out of the screen
# is recommended to work on large images.

import sys
import os
import gtk
import subprocess
import tempfile
import glib
import pyexiv2
import math
from shutil import copyfile


def add_key_binding(widget, keyname, callback):
	accelgroup = gtk.AccelGroup()
	key, modifier = gtk.accelerator_parse(keyname)
	accelgroup.connect_group(key, modifier, gtk.ACCEL_VISIBLE, callback)
	widget.add_accel_group(accelgroup)

class EventImage(gtk.EventBox):
	def __init__(self):
		super(self.__class__, self).__init__()
		self.image = gtk.Image()
		self.add(self.image)
	def clear(self):
		return self.image.clear()
	def set_from_pixbuf(self, *args):
		return self.image.set_from_pixbuf(*args)
	def set_from_file(self, *args):
		return self.image.set_from_file(*args)
	def set_from_file_at_size(self, path, w, h):
		pixbuf = gtk.gdk.pixbuf_new_from_file_at_size(path, w, h)
		self.image.set_from_pixbuf(pixbuf)
	def set_size_request(self, *args):
		return self.image.set_size_request(*args)
	@property
	def size(self):
		pb = self.image.get_pixbuf()
		return pb.get_width(), pb.get_height()
	@property
	def width(self):
		return self.size[0]
	@property
	def height(self):
		return self.size[1]
	@property
	def pixbuf(self):
		return self.image.get_pixbuf()
	@pixbuf.setter
	def pixbuf(self, pb):
		self.image.set_from_pixbuf(pb)
	def redraw(self):
		self.pixbuf = self.pixbuf

class StockButton(gtk.Button):
	def __init__(self, label=None, stock=None, use_underline=True, icon_size=None):
		if stock is not None and stock in gtk.stock_list_ids():
			stock_tmp = stock
		else:
			stock_tmp = gtk.STOCK_ABOUT
		super(self.__class__, self).__init__(stock=stock_tmp, use_underline=use_underline)
		if label is not None:
			self.set_markup(label)
		if stock is None:
			self.set_icon('')
		elif stock not in gtk.stock_list_ids():
			self.set_icon(stock)
		if icon_size is not None:
			self.set_icon(stock, icon_size)
	def __get_children(self):
		align = self.get_children()[0]
		hbox = align.get_children()[0]
		return hbox.get_children()
	def set_label(self, label):
		x, lbl = self.__get_children()
		lbl.set_label(label)
	def set_markup(self, label):
		x, lbl = self.__get_children()
		lbl.set_markup(label)
	def set_icon(self, icon, size=gtk.ICON_SIZE_BUTTON):
		img, x = self.__get_children()
		if type(icon) == str:
			if icon == '':
				img.props.visible = False
			else:
				img.set_from_icon_name(icon, size)
				img.props.visible = True
		else:
			img.set_from_pixbuf(icon)
			img.props.visible = True

class Coordinate(object):
	def __init__(self, x, y):
		self.x = x
		self.y = y
	def __str__(self):
		return '%d,%d' % (self.x, self.y)

def on_clicked(widget, event):
	x = int(min(max(0, event.x), image.width))
	y = int(min(max(0, event.y), image.height))
	
	if event.button == 1:
		if all([c.x!=x and c.y!=y for c in coordinates]):
			if len(coordinates) >= 4:
				remove_closest_point(x, y)
			coordinates.append(Coordinate(x, y))
	elif event.button == 3:
		remove_closest_point(x, y)
	update_statusline()

def remove_closest_point(x, y):
	if len(coordinates) > 0:
		distances = map(lambda c: {'d': (abs(c.x - x)**2 + abs(c.y - y)**2)**0.5, 'p': c}, coordinates)
		closest = sorted(distances, key=lambda x: x['d'])[0]['p']
		coordinates.remove(closest)

def update_statusline():
	topleft, bottomleft, topright, bottomright = get_quadrangle_points()
	#text = '%d:%d; %d:%d; %d:%d; %d:%d' % (topleft.x, topleft.y, topright.x, topright.y, bottomright.x, bottomright.y, bottomleft.x, bottomleft.y)
	text = '; '.join(map(lambda c: "%d:%d"%(c.x, c.y), filter(lambda c: c.x >= 0, [topleft, topright, bottomright, bottomleft])))
	if len(coordinates) > 1:
		vangle, hangle = get_linesegment_angle(coordinates[0], coordinates[1])
		text += '; vert %0.2f°; horiz %0.2f°' % (vangle, hangle)
	
	statusline.set_text(text)
	
	image.redraw()
	glib.idle_add(draw_cage, priority=glib.PRIORITY_DEFAULT_IDLE)

def draw_cage():
	topleft, bottomleft, topright, bottomright = get_quadrangle_points()
	real_points = filter(lambda c: c.x >= 0, [topleft, topright, bottomright, bottomleft])
	if len(real_points) > 0:
		drawable = image.window
		gc = gtk.gdk.GC(drawable)
		gc.set_rgb_fg_color(gtk.gdk.color_parse('red'))
		drawable.draw_lines(gc, [(c.x, c.y) for c in make_polygon(real_points)])

def make_polygon(points):
	for i in range(len(points)):
		yield points[i-1]
		yield points[i]

def get_quadrangle_points():
	points_left_to_right = sorted(coordinates, cmp=lambda a, b: cmp(a.x, b.x))
	while len(points_left_to_right) < 4: points_left_to_right.append(Coordinate(-1, -1))
	src_left_points  = points_left_to_right[0:2]
	src_right_points = points_left_to_right[-2:]
	src_topleft     = sorted(src_left_points,  cmp=lambda a, b: cmp(a.y, b.y))[0]
	src_bottomleft  = sorted(src_left_points,  cmp=lambda a, b: cmp(a.y, b.y))[1]
	src_topright    = sorted(src_right_points, cmp=lambda a, b: cmp(a.y, b.y))[0]
	src_bottomright = sorted(src_right_points, cmp=lambda a, b: cmp(a.y, b.y))[1]
	return src_topleft, src_bottomleft, src_topright, src_bottomright

def do_magick(distortion=True, crop=True):
	src_topleft, src_bottomleft, src_topright, src_bottomright = get_quadrangle_points()
	leftmost   = sorted(coordinates, cmp=lambda a, b: cmp(a.x, b.x))[0].x
	topmost    = sorted(coordinates, cmp=lambda a, b: cmp(a.y, b.y))[0].y
	rightmost  = sorted(coordinates, cmp=lambda a, b: cmp(a.x, b.x))[-1].x
	bottommost = sorted(coordinates, cmp=lambda a, b: cmp(a.y, b.y))[-1].y
	trg_topleft     = Coordinate(leftmost, topmost)
	trg_bottomleft  = Coordinate(leftmost, bottommost)
	trg_topright    = Coordinate(rightmost, topmost)
	trg_bottomright = Coordinate(rightmost, bottommost)
	coordinatepairs = ' '.join(map(str, [
		src_topleft, trg_topleft, 
		src_topright, trg_topright,
		src_bottomright, trg_bottomright,
		src_bottomleft, trg_bottomleft,
		]))
	cmd = ["convert", SOURCEFILE, "-auto-orient"]
	if distortion:
		cmd.extend(["-matte", "-virtual-pixel", "transparent", "-distort", "Perspective", coordinatepairs])
	if crop:
		cmd.extend(["-crop", "%dx%d+%d+%d"%(rightmost-leftmost, bottommost-topmost, leftmost, topmost), "+repage"])
	run_command_with_tempfile(cmd)

def run_command_with_tempfile(cmd):
	_fd, outfile = tempfile.mkstemp(suffix='.jpg')
	cmd.extend([outfile])
	run_command_background(cmd, callback=(cb_imagemagick, {'outfile': outfile}))

def cb_imagemagick(err, user_params):
	if err != 0:
		sys.stderr.write("imagemagick error: %d\n" % err)
	else:
		outfile = user_params['outfile']
		subprocess.Popen([sys.executable, sys.argv[0], outfile], stdout=sys.stdout, stderr=sys.stderr)

def run_command_background(cmd, callback=None):
	# start convert in detached background process
	pid1 = os.fork()
	if pid1 == 0:
		os.closerange(3, 255)
		pid2 = os.fork()
		if pid2 == 0:
			print cmd
			err = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
			if callback is not None:
				callback[0](err, *callback[1:])
			os._exit(err)
		else:
			os._exit(0)
	else:
		os.waitpid(pid1, 0)

def do_distortion_and_crop(*_):
	do_magick(distortion=True, crop=True)

def do_crop(*_):
	do_magick(distortion=False, crop=True)

def get_linesegment_angle(A, B):
	tan = float(A.x - B.x) / float(A.y - B.y)
	ang = math.degrees(math.atan(tan))
	return ang, ang + 90 if ang <= 0 else ang - 90

def do_rotation_horizontal(*_):
	vangle, hangle = get_linesegment_angle(coordinates[0], coordinates[1])
	do_rotation(hangle)

def do_rotation_vertical(*_):
	vangle, hangle = get_linesegment_angle(coordinates[0], coordinates[1])
	do_rotation(vangle)

def do_rotation(angle):
	cmd = ["convert", SOURCEFILE, "-auto-orient", "-rotate", str(angle)]
	run_command_with_tempfile(cmd)

def exif_transforms():
	# transform the image on screen according to the file's EXIF metadata
	metadata = pyexiv2.ImageMetadata(SOURCEFILE)
	metadata.read()
	if 'Exif.Image.Orientation' in metadata.exif_keys:
		orientation = metadata['Exif.Image.Orientation'].value
		# flip-flop:
		if orientation in [2, 4]:
			# mirror on the vertical axis
			image.pixbuf = image.pixbuf.flip(horizontal=False)
			orientation -= 1
		elif orientation in [5, 7]:
			# mirror on the horizontal axis
			image.pixbuf = image.pixbuf.flip(horizontal=True)
			orientation += 1
		# rotation:
		rotation = None
		if orientation == 6:
			# rotate 90° CW
			rotation = gtk.gdk.PIXBUF_ROTATE_CLOCKWISE
		elif orientation == 3:
			# rotate 180° CW
			rotation = gtk.gdk.PIXBUF_ROTATE_UPSIDEDOWN
		elif orientation == 8:
			# rotate 270° CW
			rotation = gtk.gdk.PIXBUF_ROTATE_COUNTERCLOCKWISE
		if rotation is not None:
			image.pixbuf = image.pixbuf.rotate_simple(rotation)

def do_open(*_):
	run_command_background(["gpicview", SOURCEFILE])

def do_save_as(*_):
	save_path = file_choose_dialog_save(SOURCEFILE)
	if save_path is not None:
		if not os.path.exists(save_path) or question("Overwrite?\n<tt>%s</tt>"%glib.markup_escape_text(save_path), gtk.STOCK_SAVE, gtk.STOCK_CANCEL, window):
			try:
				copyfile(SOURCEFILE, save_path)
			except Exception as e:
				display_error(e)

def display_error(e):
	text = None
	if isinstance(e, OSError) or isinstance(e, IOError):
		text = '%s (#%d)' % (e.strerror, e.errno)
		if e.filename is not None:
			text += '\n%s' % (e.filename)
	elif isinstance(e, Exception):
		text = e.message
	elif type(e) == type([]):
		text = ''.join(e)
	if text is None:
		text = str(e)
	dlg = gtk.MessageDialog(window, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, text)
	dlg.set_title("Error")
	dlg.run()
	dlg.destroy()

def question(msg, stock_yes=None, stock_no=None, parent=None):
	dlg = gtk.MessageDialog(parent, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO)
	dlg.set_markup(msg)
	dlg.set_title("Question")
	if stock_no is not None:
		dlg.get_widget_for_response(gtk.RESPONSE_NO).hide()
		if hasattr(stock_no, '__iter__'):
			btn_no = StockButton(label=stock_no[0], stock=stock_no[1])
		else:
			btn_no = StockButton(stock=stock_no)
		dlg.add_action_widget(btn_no, gtk.RESPONSE_NO)
		btn_no.show()
	if stock_yes is not None:
		dlg.get_widget_for_response(gtk.RESPONSE_YES).hide()
		if hasattr(stock_yes, '__iter__'):
			btn_yes = StockButton(label=stock_yes[0], stock=stock_yes[1])
		else:
			btn_yes = StockButton(stock=stock_yes)
		dlg.add_action_widget(btn_yes, gtk.RESPONSE_YES)
		btn_yes.show()
	resp = dlg.run()
	dlg.destroy()
	return (resp == gtk.RESPONSE_YES)

def file_choose_dialog_save(filepath):
	global LastFolder
	try: LastFolder
	except NameError: LastFolder = None
	selected = None
	action = gtk.FILE_CHOOSER_ACTION_SAVE
	
	dlg = gtk.FileChooserDialog(parent=window, action=action, buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_SAVE, gtk.RESPONSE_ACCEPT))
	if LastFolder is not None: dlg.set_current_folder(LastFolder)
	dlg.set_current_name(os.path.basename(filepath))
	
	last_resp_num = max(map(lambda a: int(getattr(gtk, a)), filter(lambda a: a.startswith('RESPONSE_'), dir(gtk))))
	
	resp_num_cwd = last_resp_num + 1
	btn_cwd = StockButton(label="Working Dir", stock=gtk.STOCK_JUMP_TO)
	dlg.add_action_widget(btn_cwd, resp_num_cwd)
	btn_cwd.show()
	
	resp_num_fdir = last_resp_num + 2
	btn_fdir = StockButton(label="Jump to File", stock=gtk.STOCK_JUMP_TO)
	dlg.add_action_widget(btn_fdir, resp_num_fdir)
	btn_fdir.show()
	
	while True:
		resp = dlg.run()
		if resp == gtk.RESPONSE_ACCEPT:
			selected = dlg.get_filename()
			break
		elif resp == resp_num_cwd:
			dlg.set_current_folder(os.getcwd())
		elif resp == resp_num_fdir:
			dlg.set_current_folder(os.path.dirname(filepath))
		else:
			break
	LastFolder = dlg.get_current_folder()
	dlg.destroy()
	return selected




window = gtk.Window()
window.set_title("Perspective correction")
window.connect('delete-event', lambda *x: gtk.main_quit())
add_key_binding(window, 'Escape', gtk.main_quit)
add_key_binding(window, 'F1', do_distortion_and_crop)
add_key_binding(window, 'F2', do_crop)
add_key_binding(window, 'F3', do_rotation_horizontal)
add_key_binding(window, 'F4', do_rotation_vertical)
add_key_binding(window, '<Control>S', do_save_as)
add_key_binding(window, '<Control>O', do_open)

box1 = gtk.VBox()
statusline = gtk.Label()
statusline.set_alignment(0, 0)


SOURCEFILE = sys.argv[1]
window.set_title(window.get_title() + ": " + SOURCEFILE)

image = EventImage()
image.set_from_file(SOURCEFILE)
image.connect('button-release-event', on_clicked)
exif_transforms()

coordinates = []


window.add(box1)
box1.pack_start(image, True, True)
box1.pack_start(statusline, False, True)

window.show_all()
window.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.CROSSHAIR))
gtk.main()
